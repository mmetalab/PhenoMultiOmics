runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
customCSS <- "
.container-fluid {
margin-top: 20px;
padding: 15px;
background-color: #f7f7f7;
border: 1px solid #ddd;
border-radius: 4px;
box-shadow: 0 1px 1px rgba(0,0,0,.05);
}
.container-fluid h3 {
color: #337ab7;
}
.shiny-code-container {
background-color: #fff;
border: 1px solid #ddd;
padding: 15px;
border-radius: 4px;
margin-bottom: 20px;
}
"
Database_of_GC<- "PhenoMultiOmics database (PMODB) comprises essential information about diseases, genes, proteins, and metabolites, each assigned a public database. For genes and diseases, it includes the disease name and ID, gene name, gene symbol, and gene-disease association score. Regarding proteins, the database contains information such as protein name, enzyme classification number (EC number), UniProt ID, enzyme name, protein sequence length, and the corresponding gene name for the protein. As for metabolites, PMODB includes metabolite name, chemical formula, SMILES notation, and associated metabolic pathways.
PMODB enables rapid access to multi-omics reaction relationship information by querying genes, proteins, or metabolites, with the query results available for download in tabular format."
Database_of_GC_split <- gsub("PMODB enables rapid access", "<br><br>PMODB enables rapid access", Database_of_GC)
Omics_network <- "Based on the established PhenoMultiOmics Database (PMODB), a multi-omics network is generated utilizing enzymatic reaction data involving genes, proteins, and metabolites. In this network, each gene, protein, or metabolite is represented as a node. The enzymatic reaction information is used to create edges between genes, proteins, and metabolites. Specifically, in enzymatic reactions, edges denote interactions between proteins (enzymes) and metabolites (substrates and products). Additionally, for genes that regulate protein expression, connections are established between genes and proteins, as well as between genes and metabolites.
This section is divided into two modules, one for uploading data and the other for generating MultiOmics networks. When uploading data, first select the type of disease, involving 20 types of tumors. After clicking search, the main dashboard will display all the node file and edge file of the tumor. After uploading the file, the main dashboard automatically generates tumor-related enzymatic reactions and multi-omics associations extracted from the node file.
In the module dedicated to generating MultiOmics networks, you have the ability to visualize instance data networks. This module also allows you to select uploaded data as Nodes Data. By clicking 'plot', you can create intricate multi-omics graphs. To enhance the aesthetic appeal of these network diagrams, you can adjust the layout style and vary the range of node sizes, adding an extra layer of customization and clarity to your data visualization."
Omics_network_split <- gsub("This section is divided into two modules,", "<br><br> This section is divided into two modules,", Omics_network)
Omics_network_split2 <- gsub("In the module dedicated to generating MultiOmics", "<br><br> In the module dedicated to generating MultiOmics", Omics_network)
Gene_expression <- "For statistical analysis, differential omic feature data analysis is embedded, which require the matrices of gene expression, proteomics, or metabolomics data as input. Each row of this matrix represents a gene or feature, and each column corresponds to a sample ID. This analysis leverages the lima R package to calculate the Log2 Fold Change (Log2FC), estimating differences between case and control groups .Results are presented in tables and volcano plot."
Gene_set_enrichment_analysis <- "Furthermore, for differentially expressed genes, Gene Set Pathway Enrichment Analysis (GSEA) is conducted, drawing from the clusterProfiler package . This analysis utilizes human genome annotation from org.Hs.eg.db and pathway enrichment data from the KEGG database. Enrichment factors and BH-corrected P-values are computed to identify significant enrichment pathways, displayed via bar and bubble charts. Finally, the enrichplot R package is used to visualize networks of individual genes and pathways."
fluidPage(
tags$head(tags$style(HTML(customCSS))),
tabPanel(
"Documentation",
mainPanel(
tags$div(class="container-fluid",
tags$h3("MultiOmics Database"),
shiny::tags$div(class="shiny-code-container",
HTML(Database_of_GC_split))
),
tags$div(class="container-fluid",
tags$h3("MultiOmics Network"),
shiny::tags$div(class="shiny-code-container",
HTML(Omics_network_split, Omics_network_split2))
),
tags$div(class="container-fluid",
tags$h3("Functional Analysis"),
shiny::tags$div(class="shiny-code-container",
HTML(Gene_expression),
br(),
HTML(Gene_set_enrichment_analysis))
)
)
)
)
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
library(bitr)
runApp('App.functional_analysis.R')
shiny::runApp()
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
runApp('App.functional_analysis.R')
UI <- shinyUI(tagList(
dashboardPage(
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
shinyDashboardThemes(theme = "poor_mans_flatly"),
navbarPage("PhenoMultiOmics",
theme = shinytheme("flatly"),
tabPanel(
title = "Home"
),
source("ui.database.R",local = TRUE)$value,
source("ui.omicsnetwork.R",local = TRUE)$value,
source("ui.functional_analysis.R",local = TRUE)$value,
# source("ui.DE_analysis.R",local = TRUE)$value,
# source("ui.GSPE_analysis.R",local = TRUE)$value,
source("ui.documentation.R",local = TRUE)$value
)
)
)
))
runApp()
runApp()
runApp()
UI <- shinyUI(
tagList(
dashboardPage(
dashboardHeader(disable = TRUE),
dashboardSidebar(disable = TRUE),
dashboardBody(
shinyDashboardThemes(theme = "poor_mans_flatly"),
navbarPage("PhenoMultiOmics",
theme = shinytheme("flatly"),
fluidRow(
column(12, h1("Welcome to PhenoMultiOmics")),
column(6, plotOutput("plot1")),
column(6, dataTableOutput("table1"))
),
tabPanel("MultiOmics DB",
source("ui.database.R",local = TRUE)$value),
tabPanel("MultiOmics Network",
source("ui.omicsnetwork.R",local = TRUE)$value),
tabPanel("Functional analysis",
source("ui.functional_analysis.R",local = TRUE)$value),
tabPanel("Documentation",
source("ui.documentation.R",local = TRUE)$value)
)
)
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
library(shiny)
library(shinyjs)
# Define the UI
ui <- fluidPage(
useShinyjs(),  # Initialize shinyjs
titlePanel("科研主页"),
# 使用侧边栏布局来分隔文本和图片内容
sidebarLayout(
sidebarPanel(
h4("关于研究"),
p("在这里写入关于科研项目的介绍文本，包括研究目的、重要性和基本方法等。"),
# 动态文本输出，用于显示点击人体结构图的详细信息
textOutput("info_text")
),
mainPanel(
h4("探索人体结构"),
# 显示人体结构图，使用 imageOutput 和相应的 UI 输出ID
imageOutput("body_image", click = "image_click")
)
)
)
library(shiny)
library(shinyjs)
# Define the server logic
server <- function(input, output, session) {
# 为人体结构图生成反应式的点击事件
observeEvent(input$image_click, {
# 点击事件发生时，获取点击的坐标
info <- input$image_click
# 基于坐标显示不同的信息，这里我们仅作为示例
# 在实际应用中，您可能会根据坐标来判断点击的是哪个部位
# 并显示相应的信息
if (info$x > 0 && info$y > 0) {
# 使用 shinyjs 来显示隐藏的 div 信息
show("info_div")
# 更新文本输出
output$info_text <- renderText({
paste("您点击了坐标: x =", info$x, "y =", info$y)
})
}
})
# 为人体结构图提供图像路径
output$body_image <- renderImage({
list(src = "human_body.png",
contentType = "image/png",
width = 400,
height = 600,
alt = "人体结构图")
}, deleteFile = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "科研主页"),
dashboardSidebar(
sidebarMenu(
menuItem("关于项目", tabName = "about", icon = icon("info-circle")),
menuItem("人体结构图", tabName = "body_map", icon = icon("image"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "about",
fluidRow(
box(title = "欢迎", status = "primary", solidHeader = TRUE,
"在这里写入关于科研项目的介绍文本，包括研究目的、重要性和基本方法等。"
)
)
),
tabItem(tabName = "body_map",
fluidRow(
box(title = "探索人体结构", status = "warning", solidHeader = TRUE,
imageOutput("body_image", click = "image_click"),
textOutput("info_text")
)
)
)
)
)
)
library(shiny)
library(shinyjs)
# Define the server logic
server <- function(input, output, session) {
# 为人体结构图生成反应式的点击事件
observeEvent(input$image_click, {
# 点击事件发生时，获取点击的坐标
info <- input$image_click
# 基于坐标显示不同的信息，这里我们仅作为示例
# 在实际应用中，您可能会根据坐标来判断点击的是哪个部位
# 并显示相应的信息
if (info$x > 0 && info$y > 0) {
# 使用 shinyjs 来显示隐藏的 div 信息
show("info_div")
# 更新文本输出
output$info_text <- renderText({
paste("您点击了坐标: x =", info$x, "y =", info$y)
})
}
})
# 为人体结构图提供图像路径
output$body_image <- renderImage({
list(src = "human_body.png",
contentType = "image/png",
width = 400,
height = 600,
alt = "人体结构图")
}, deleteFile = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 定义 Home tabPanel
tabPanel("Home",
fluidRow(
align = "center",
column(12,
h1("欢迎来到PhenoMultiOmics", id = "fancyHeader"),
p("这个应用程序是关于...")
)
),
fluidRow(
column(4, div(img(src = "construct.png", height = "100px"), id = "construct")),
column(4, div(img(src = "differential.png", height = "100px"), id = "differential")),
column(4, div(img(src = "gene_set.png", height = "100px"), id = "gene_set"))
),
fluidRow(
column(12,
p("这个应用程序是关于...")
)
)
)
# 定义 Home tabPanel
tabPanel("Home",
fluidRow(
align = "center",
column(12,
h1("欢迎来到PhenoMultiOmics", id = "fancyHeader"),
p("这个应用程序是关于...")
)
),
fluidRow(
column(4, div(img(src = "construct.png", height = "100px"), id = "construct")),
column(4, div(img(src = "differential.png", height = "100px"), id = "differential")),
column(4, div(img(src = "gene_set.png", height = "100px"), id = "gene_set"))
),
fluidRow(
column(12,
p("这个应用程序是关于...")
)
)
)
runApp()
runApp()
runApp()
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp()
runApp('App.home.R')
tabPanel("Home",
fluidRow(
align = "center",
column(12,
h1("Welcome to PhenoMultiOmics", id = "fancyHeader"),
div(
id="mainContent",
p("PhenoMultiOmics, an enzymatic reaction-based multi-omics web server designed to explore the scope of the multi-omics network across various cancer types. We first curated the PhenoMultiOmics Database (PMODB), which enables the retrieval of cancer-gene-protein-metabolite relationships based on the enzymatic reactions. We then developed the MultiOmics network visualization module to depict the interplay between genes, proteins, and metabolites in response to specific cancer-related enzymatic reactions.
The biomarker discovery module facilitates functional analysis through differential omic feature expression and pathway enrichment analysis.
PhenoMultiOmics has been applied to analyze transcriptomics data of gastric cancer and metabolomics data of lung cancer, providing insights into interrupted enzymatic reactions and the associated multi-omics network.")
))
),
fluidRow(
div(img(src = "construct.png", height = "100px"), id = "construct")),
fluidRow(
column(12,
div(
id="mainContent",
p("Distribution of genes, proteins and metabolites in 20 kinds of tumors"))
)
)
)
runApp('App.home.R')
runApp('App.home.R')
tabPanel("Home",
runApp('App.home.R')
tabPanel("Home",
tabPanel("Home",
fluidRow(
align = "center",
column(12,
h1("Welcome to PhenoMultiOmics", id = "fancyHeader"),
div(
id="mainContent",
p("PhenoMultiOmics, an enzymatic reaction-based multi-omics web server designed to explore the scope of the multi-omics network across various cancer types. We first curated the PhenoMultiOmics Database (PMODB), which enables the retrieval of cancer-gene-protein-metabolite relationships based on the enzymatic reactions. We then developed the MultiOmics network visualization module to depict the interplay between genes, proteins, and metabolites in response to specific cancer-related enzymatic reactions.
The biomarker discovery module facilitates functional analysis through differential omic feature expression and pathway enrichment analysis.
PhenoMultiOmics has been applied to analyze transcriptomics data of gastric cancer and metabolomics data of lung cancer, providing insights into interrupted enzymatic reactions and the associated multi-omics network.")
))
),
fluidRow(
column(12,
div(img(src = "construct.png", height = "100px"), id = "construct"))
fluidRow(
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp('App.home.R')
runApp()
runApp('App.home.R')
runApp()
runApp()
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
UI <- shinyUI(tagList(
navbarPage("PhenoMultiOmics",
theme = shinytheme("flatly"),
source("ui.omicsnetwork.R",local = TRUE)$value
))
)
Server <- shinyServer(function(input,output,session){
source("server.omicsnetwork.R",local = TRUE)}
)
shinyApp(UI,Server)
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp('App.omicsnetwork.R')
runApp()
tabPanel(
"Documentation",
# mainPanel(
fluidRow(
column(12,
# tags$h3(tags$span(class="fas fa-database icon"), "MultiOmics Database"),
# div(class="container-fluid shiny-code-container well", HTML(Database_of_GC_split)),
tags$h3("MultiOmics Database"),
shiny::tags$div(class="container-fluid shiny-code-containner well",
HTML(Database_of_GC_split)),
tags$h3("MultiOmics Network"),
shiny::tags$div(class="container-fluid shiny-code-containner well",
HTML(Omics_network_split,Omics_network_split2)),
tags$h3("Functional Analysis"),
shiny::tags$div(class="container-fluid shiny-code-containner well",
HTML(Gene_expression),
br(),
br(),
HTML(Gene_set_enrichment_analysis))
))
)
runApp('App.documentation.R')
runApp('App.documentation.R')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('App.home.R')
runApp('App.home.R')
runApp()
runApp()
runApp()
library(httr)
library(jsonlite)
getwd()
# 定义URL
url <- "http://www.hmdb.ca/metabolites/HMDB0000122"
# 发送GET请求
response <- GET(url)
# 检查请求是否成功
if (status_code(response) == 200) {
print("请求成功!")
} else {
print("请求失败!")
}
# 假设返回的数据是JSON格式
data <- fromJSON(content(response, "text"), flatten = TRUE)
# 保存CSV文件
temp_file <- tempfile()
writeBin(content(response, "raw"), temp_file)
# 读取CSV数据
data <- read.csv(temp_file)
# 查看数据
print(head(data))
View(data)
unlink(temp_file)
# 安装和加载必要的包
library(httr)
# 读取CSV文件
data <- read.csv("/mnt/data/5.鉴定后的数据H5_metabolite.csv")
data <- read.csv("C:\\Users\\shi_yuying\\Desktop\\MS_data\1号样本\\5.鉴定后的数据H5_metabolite.csv")
data <- read.csv("C:\\Users\\shi_yuying\\Desktop\\MS_data\\1号样本\\5.鉴定后的数据H5_metabolite.csv")
# 查看数据结构
str(data)
print(head(data))
unlink(temp_file)
# 提取compound_id列
compound_ids <- data$compound_id
# 构建URLs (这里需要知道具体的URL格式)
urls <- paste0("http://www.hmdb.ca/metabolites/", compound_ids)
# 函数来获取每个compound_id的数据
get_hmdb_data <- function(url) {
response <- GET(url)
if (status_code(response) == 200) {
# 这里根据实际返回的数据格式来解析数据
# 例如，如果数据是JSON格式的，则使用fromJSON(content(response, "text"))
return(content(response, "text"))
} else {
warning("请求失败，URL: ", url)
return(NULL)
}
}
# 获取所有数据
hmdb_data <- lapply(urls, get_hmdb_data)
library(hmdbQuery)
install.packages("hmdbQuery")
install.packages("devtools")
devtools::install_github("repository/hmdbQuery")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hmdbQuery")
library(hmdbQuery)
compound_ids <- "HMDB0289812"
results <- lapply(compound_ids, function(id) {
tryCatch({
getMetabolite(id)
}, error = function(e) {
NULL  # 在出错时返回NULL
})
})
metabolite_data <- getMetabolite(compound_ids)
shiny::runApp()
